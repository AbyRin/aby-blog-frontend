{"ast":null,"code":"document.addEventListener('DOMContentLoaded', function () {\n  // 遍历所有 filter 并 绑定事件\n  const allFilters = document.querySelectorAll(\".filter\");\n  let clickedFilter = null;\n  allFilters.forEach(filter => {\n    filter.addEventListener('mouseover', function () {\n      if (filter !== clickedFilter) {\n        filter.style.backgroundColor = '#E8E8E8';\n      }\n    });\n    filter.addEventListener('mouseout', function () {\n      if (filter !== clickedFilter) {\n        filter.style.backgroundColor = '#ffffff';\n      }\n    });\n    filter.addEventListener('click', function () {\n      if (clickedFilter) {\n        // 移除上一个点击的 filter 样式\n        // clickedFilter.style.fontWeight = 'normal';\n        clickedFilter.style.color = '#31384f';\n        clickedFilter.style.backgroundColor = '#ffffff';\n      }\n      // 添加样式到点击的 filter\n      // filter.style.fontWeight = 'bold';\n      filter.style.color = '#ffffff';\n      filter.style.backgroundColor = '#4e9da9';\n\n      // 更新 clickedFilter\n      clickedFilter = filter;\n    });\n  });\n\n  // 子区1：切换按钮：显示/隐藏\n  // const commentContainer = document.querySelector(\"comment_container\");\n  // const toggle = document.querySelector(\"toggle_bar\");\n\n  // let isHidden = true; // 初始时隐藏\n\n  // toggle.addEventListener(\"click\", () => {\n  // if (isHidden) {\n  //     commentContainer.style.bottom = \"20px\"; // 点击显示\n  // } else {\n  //     commentContainer.style.bottom = \"0px\"; // 点击隐藏\n  // }\n  // isHidden = !isHidden; // 切换状态\n  // });\n\n  // 子区2：文本  \n  const text = document.getElementById('text');\n  const total = document.querySelector('.total');\n  if (text) {}\n  // 文本域获得焦点时, total 显示\n  text.addEventListener('focus', function () {\n    total.style.opacity = 1;\n  });\n  // 文本域失去焦点时，total 隐藏\n  text.addEventListener('blur', function () {\n    total.style.opacity = 0;\n  });\n  // 字数统计\n  text.addEventListener('input', function () {\n    // console.log(text.value.length);\n    total.innerHTML = `${text.value.length}/400字`;\n  });\n\n  // 动态调整textarea的高度以适应内容\n  const textArea = document.getElementById(\"text\");\n  const textBar = document.querySelector(\".text_bar\");\n  const commentContainer = document.querySelector(\".comment_container\");\n  textArea.addEventListener(\"input\", () => {\n    textArea.style.height = \"auto\"; // 重置高度\n    textArea.style.height = textArea.scrollHeight + \"px\"; // 设置高度为内容的实际高度\n\n    // textArea达到最大高度，textBar和commentContainer高度不再随之变化\n    const maxHeight = 128;\n    if (textArea.scrollHeight <= maxHeight) {\n      textBar.style.height = textArea.scrollHeight + 18 + \"px\"; // 适当调整text_bar的高度\n      commentContainer.style.height = textArea.scrollHeight + 92 + \"px\"; // 调整comment_container的高度\n    } else {\n      textBar.style.height = maxHeight + 18 + \"px\";\n      commentContainer.style.height = maxHeight + 92 + \"px\";\n    }\n  });\n\n  // // 仅在按下 回车键时 发布评论（使用结构: list）\n  // text.addEventListener('keyup', function(e) {\n  //     if (e.key === 'Enter') {\n  //         // 若用户输入不为空，就显示和打印\n  //         if (text.value.trim() !== '') {\n  //         // if (text.value.trim()) {  //另一种写法\n  //             item.style.display = 'block';\n  //             text.innerHTML = text.value;  // 用户输入内容\n  //         }\n  //         // 按下回车键，清空文本域\n  //         text.value = ''  // Tip: trim()方法，去除字符串前后的空格\n  //         // 按下回车后，字符统计复原\n  //         total.innerHTML = '0/400字'\n  //     }\n  // })\n});","map":{"version":3,"names":["document","addEventListener","allFilters","querySelectorAll","clickedFilter","forEach","filter","style","backgroundColor","color","text","getElementById","total","querySelector","opacity","innerHTML","value","length","textArea","textBar","commentContainer","height","scrollHeight","maxHeight"],"sources":["D:/IDEAWorkSpace/aby-blog-v2/src/js/forum.js"],"sourcesContent":["document.addEventListener('DOMContentLoaded', function() {\r\n    // 遍历所有 filter 并 绑定事件\r\n    const allFilters = document.querySelectorAll(\".filter\");\r\n    let clickedFilter = null;\r\n\r\n    allFilters.forEach(filter => {\r\n        filter.addEventListener('mouseover', function() {\r\n            if (filter !== clickedFilter) {\r\n                filter.style.backgroundColor = '#E8E8E8';\r\n            }\r\n        });\r\n\r\n        filter.addEventListener('mouseout', function() {\r\n            if (filter !== clickedFilter) {\r\n                filter.style.backgroundColor = '#ffffff';\r\n            }\r\n        });\r\n\r\n        filter.addEventListener('click', function() {\r\n            if (clickedFilter) {\r\n                // 移除上一个点击的 filter 样式\r\n                // clickedFilter.style.fontWeight = 'normal';\r\n                clickedFilter.style.color = '#31384f';\r\n                clickedFilter.style.backgroundColor = '#ffffff';\r\n            }\r\n            // 添加样式到点击的 filter\r\n            // filter.style.fontWeight = 'bold';\r\n            filter.style.color = '#ffffff';\r\n            filter.style.backgroundColor = '#4e9da9';\r\n\r\n            // 更新 clickedFilter\r\n            clickedFilter = filter;\r\n        });\r\n    });\r\n\r\n\r\n    // 子区1：切换按钮：显示/隐藏\r\n    // const commentContainer = document.querySelector(\"comment_container\");\r\n    // const toggle = document.querySelector(\"toggle_bar\");\r\n\r\n    // let isHidden = true; // 初始时隐藏\r\n\r\n    // toggle.addEventListener(\"click\", () => {\r\n    // if (isHidden) {\r\n    //     commentContainer.style.bottom = \"20px\"; // 点击显示\r\n    // } else {\r\n    //     commentContainer.style.bottom = \"0px\"; // 点击隐藏\r\n    // }\r\n    // isHidden = !isHidden; // 切换状态\r\n    // });\r\n\r\n    // 子区2：文本  \r\n    const text = document.getElementById('text');\r\n    const total = document.querySelector('.total');\r\n\r\n    if (text) {}\r\n    // 文本域获得焦点时, total 显示\r\n    text.addEventListener('focus', function() {\r\n        total.style.opacity = 1;\r\n    })\r\n    // 文本域失去焦点时，total 隐藏\r\n    text.addEventListener('blur', function() {\r\n        total.style.opacity = 0;\r\n    })\r\n    // 字数统计\r\n    text.addEventListener('input', function() {\r\n        // console.log(text.value.length);\r\n        total.innerHTML = `${text.value.length}/400字`;\r\n    })\r\n\r\n    // 动态调整textarea的高度以适应内容\r\n    const textArea = document.getElementById(\"text\");\r\n    const textBar = document.querySelector(\".text_bar\");\r\n    const commentContainer = document.querySelector(\".comment_container\");\r\n    \r\n    textArea.addEventListener(\"input\", () => {\r\n        textArea.style.height = \"auto\"; // 重置高度\r\n        textArea.style.height = (textArea.scrollHeight) + \"px\"; // 设置高度为内容的实际高度\r\n        \r\n        // textArea达到最大高度，textBar和commentContainer高度不再随之变化\r\n        const maxHeight = 128;\r\n        if (textArea.scrollHeight <= maxHeight) {\r\n            textBar.style.height = (textArea.scrollHeight + 18) + \"px\"; // 适当调整text_bar的高度\r\n            commentContainer.style.height = (textArea.scrollHeight + 92) + \"px\"; // 调整comment_container的高度\r\n        } else {\r\n            textBar.style.height = (maxHeight + 18) + \"px\";\r\n            commentContainer.style.height = (maxHeight + 92) + \"px\";\r\n        }\r\n    });\r\n    \r\n\r\n    // // 仅在按下 回车键时 发布评论（使用结构: list）\r\n    // text.addEventListener('keyup', function(e) {\r\n    //     if (e.key === 'Enter') {\r\n    //         // 若用户输入不为空，就显示和打印\r\n    //         if (text.value.trim() !== '') {\r\n    //         // if (text.value.trim()) {  //另一种写法\r\n    //             item.style.display = 'block';\r\n    //             text.innerHTML = text.value;  // 用户输入内容\r\n    //         }\r\n    //         // 按下回车键，清空文本域\r\n    //         text.value = ''  // Tip: trim()方法，去除字符串前后的空格\r\n    //         // 按下回车后，字符统计复原\r\n    //         total.innerHTML = '0/400字'\r\n    //     }\r\n    // })\r\n});"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}