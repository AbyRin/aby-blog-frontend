{"ast":null,"code":"import { createCommentVNode as _createCommentVNode, createElementVNode as _createElementVNode, createTextVNode as _createTextVNode, createStaticVNode as _createStaticVNode, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\";\nconst _withScopeId = n => (_pushScopeId(\"data-v-5b385bc4\"), n = n(), _popScopeId(), n);\nconst _hoisted_1 = /*#__PURE__*/_createStaticVNode(\"<div class=\\\"elevator\\\" data-v-5b385bc4><ul class=\\\"elevator-list\\\" data-v-5b385bc4><li data-v-5b385bc4><a href=\\\"javascript:;\\\" data-name=\\\"new\\\" data-v-5b385bc4>Class-1</a></li><li data-v-5b385bc4><a href=\\\"javascript:;\\\" data-name=\\\"popular\\\" data-v-5b385bc4>Class-2</a></li><li data-v-5b385bc4><a href=\\\"javascript:;\\\" data-name=\\\"brand\\\" data-v-5b385bc4>Class-3</a></li><li data-v-5b385bc4><a href=\\\"javascript:;\\\" data-name=\\\"topic\\\" data-v-5b385bc4>Class-4</a></li><li data-v-5b385bc4><a href=\\\"javascript:;\\\" id=\\\"backTop\\\" data-v-5b385bc4><i class=\\\"sprites\\\" data-v-5b385bc4></i>顶部</a></li></ul></div>\", 1);\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(_Fragment, null, [_createCommentVNode(\" 电梯 \"), _hoisted_1], 2112 /* STABLE_FRAGMENT, DEV_ROOT_FRAGMENT */);\n}","map":{"version":3,"names":["_createCommentVNode","_hoisted_1"],"sources":["D:\\IDEAWorkSpace\\aby-blog-v2\\src\\components\\Elevator.vue"],"sourcesContent":["<template>\r\n    <!-- 电梯 -->\r\n    <div class=\"elevator\">\r\n        <ul class=\"elevator-list\">\r\n            <li><a href=\"javascript:;\" data-name=\"new\">Class-1</a></li>\r\n            <li><a href=\"javascript:;\" data-name=\"popular\">Class-2</a></li>\r\n            <li><a href=\"javascript:;\" data-name=\"brand\">Class-3</a></li>\r\n            <li><a href=\"javascript:;\" data-name=\"topic\">Class-4</a></li>\r\n            <li><a href=\"javascript:;\" id=\"backTop\"><i class=\"sprites\"></i>顶部</a></li>\r\n        </ul>\r\n    </div>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n    mouted() {\r\n        // 商店页面-功能模块: 电梯\r\n        // 功能一: 页面滑动-显示/隐藏 (1)搜索栏; (2)电梯\r\n        // 功能二: 点击 Top: 页面顶部\r\n        (function () {\r\n            // 功能一: 页面滑动-显示/隐藏 (1)搜索栏; (2)电梯\r\n            // 获取元素\r\n            const search = document.querySelector('.search_div')  // (1)搜索栏\r\n            // const elevator = document.querySelector('.elevator')  // (2)电梯\r\n\r\n            // 1. 卷去html头部 到达 商品搜索条-顶部坐标 时，就显示 电梯导航\r\n            // 已改变方案\r\n\r\n            // 2. 卷去html头部 到达 商品搜索条-顶部坐标 时, 令 商品搜索条 的top = 0\r\n            window.addEventListener('scroll', function () {\r\n                // if (document.documentElement.scrollTop >= search.offsetTop) {\r\n                //     search.style.top = 0\r\n                // }\r\n                // console.log(search.style.position)\r\n                search.style.top = document.documentElement.scrollTop >= search.offsetTop ? 0 : '-100px'\r\n            })\r\n\r\n            // 功能二: 点击 Top: 页面顶部\r\n            const backTop = document.querySelector('#backTop')\r\n            if (backTop) {\r\n                backTop.addEventListener('click', function () {\r\n                window.scrollTo(0, 0);\r\n                });\r\n            }\r\n        })();\r\n\r\n        // 功能三: 点击分类 跳转到 对应页面 (与功能四相对)\r\n        (function () {\r\n            const list = document.querySelector('.elevator_list')\r\n            if (list) {\r\n                list.addEventListener('click', function (e) {\r\n                    if (e.target.tagName === 'A' && e.target.dataset.name) {\r\n            \r\n                        // 排他\r\n                        const old = document.querySelector('.elevator_list .active')\r\n                        if (old) {old.classList.remove('active')}\r\n                        e.target.classList.add('active')\r\n            \r\n                        // 获得自定义属性  new   topic \r\n                        // console.log(e.target.dataset.name)\r\n                        // 根据小盒子的自定义属性值 去选择 对应的大盒子\r\n            \r\n                        // Bug，等待修复\r\n                        const top = document.querySelector(`.${e.target.dataset.name}`).offsetTop\r\n                        // 让页面滚动到对应的位置\r\n                        document.documentElement.scrollTop = top\r\n                    }\r\n                })\r\n            }\r\n        })();\r\n\r\n\r\n        // 功能四: 滑动页面 跳转到 对应分类 (与功能三相对)\r\n        window.addEventListener('scroll', function () {\r\n            // 排他\r\n            const old = document.querySelector('.elevator_list .active')\r\n            if (old) {old.classList.remove('active')}\r\n\r\n            // 判断页面当前滑动的位置, 选择小盒子\r\n            // 获取分类 class 和 页面滑动像素 n\r\n            const class_1 = document.querySelector('.elevator_list li a[data-name = \"class_1\"]').dataset.name\r\n            const class_2 = document.querySelector('.elevator_list li a[data-name = \"class_2\"]').dataset.name\r\n            const class_3 = document.querySelector('.elevator_list li a[data-name = \"class_3\"]').dataset.name\r\n            const class_4 = document.querySelector('.elevator_list li a[data-name = \"class_4\"]').dataset.name\r\n            const n = document.documentElement.scrollTop\r\n\r\n            // 匹配\r\n            if (n >= class_1.offsetTop && n < class_2.offsetTop) {\r\n                document.querySelector('[data-name = class_1]').classList.add('active')\r\n            } else if (n >= class_2.offsetTop && n < class_3.offsetTop) {\r\n                document.querySelector('[data-name = class_2]').classList.add('active')\r\n            } else if (n >= class_3.offsetTop && n < class_4.offsetTop) {\r\n                document.querySelector('[data-name = class_3]').classList.add('active')\r\n            } else if (n >= class_4.offsetTop) {\r\n                document.querySelector('[data-name = class_4]').classList.add('active')\r\n            }\r\n        });\r\n    }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n/* 电梯本体 */\r\n.elevator {\r\n    position: fixed;\r\n    width: 160px;\r\n    height: auto;\r\n\r\n    left: 50%;\r\n    margin-left: 620px;\r\n    top: 320px;\r\n    z-index: 100;\r\n    \r\n    /* (已修改方案) */\r\n    /* 初始隐藏电梯，页面向下滑动时伴随 书籍搜索条 出现 */\r\n    /* opacity: 0; */\r\n\r\n    text-align: center;\r\n    transition: all .5s;\r\n}\r\n\r\n/* 分类 */\r\n.elevator .elevator_list {\r\n    /* position: relative; */\r\n\r\n    width: 160px;\r\n    height: auto;\r\n\r\n    background: #fff;\r\n\r\n    margin: 0;\r\n    padding: 0;\r\n\r\n    box-shadow: 5px 5px 5px #bdbdbd;\r\n}\r\n/* 海 */\r\n.elevator .elevator_list li[class = 'sea'] {\r\n    width: auto;\r\n    height: 50px;\r\n    line-height: 50px;\r\n\r\n    border: 1px solid #dcdcdc;\r\n    margin: 0;\r\n\r\n    list-style-type: none;\r\n    background-color: #31384f;\r\n}\r\n\r\n.elevator .elevator_list li[class = 'sea'] a {\r\n    display: block;\r\n\r\n    width: auto;\r\n    height: 50px;\r\n\r\n    text-decoration: none;\r\n\r\n    color: #ffffff;\r\n}\r\n/* 世界泡 */\r\n.elevator .elevator_list li {\r\n    width: auto;\r\n    height: 50px;\r\n    line-height: 50px;\r\n\r\n    border: 1px solid #dcdcdc;\r\n    margin: 0;\r\n\r\n    list-style-type: none;\r\n}\r\n\r\n.elevator .elevator_list li a {\r\n    display: block;\r\n\r\n    width: auto;\r\n    height: 50px;\r\n\r\n    text-decoration: none;\r\n\r\n    color: #31384f;\r\n    transition: all .5s;\r\n}\r\n\r\n.elevator .elevator_list li a:hover,\r\n.elevator .elevator_list li a.active {\r\n    background-color: #f84f52;\r\n    color: #ffffff;\r\n}\r\n\r\n.elevator .elevator_list li a i {\r\n    position: relative;\r\n\r\n    display: block;\r\n\r\n    width: 16px;\r\n    height: 16px;\r\n\r\n    left: 4px\r\n    ;\r\n    background-position: 8px -106px;\r\n\r\n    font-size: 20px;\r\n    transform: rotate(-90deg);\r\n}\r\n</style>"],"mappings":";;;;6DACIA,mBAAA,QAAW,EACXC,UAQM,C"},"metadata":{},"sourceType":"module","externalDependencies":[]}